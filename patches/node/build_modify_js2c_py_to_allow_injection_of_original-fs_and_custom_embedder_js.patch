From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Cheng Zhao <zcbenz@gmail.com>
Date: Thu, 11 Apr 2019 17:16:13 +0900
Subject: build: modify js2c.py to allow injection of original-fs and custom
 embedder JS

This patch does two things:
* Updates js2c.py so that original-fs is automatically created with
support for streams by copying the file at build time and making a new
builtin called "original-fs" and "original-fs/streams"
* Updates js2c.py so that //electron can call it as part of its build
process and provide embedder modules (electrons
renderer/browser/worker/sandboxed bootstrap scripts).  These are loaded
through LoadEmbedderJavaScriptSource()

diff --git a/lib/internal/fs/watchers.js b/lib/internal/fs/watchers.js
index 99212fa713bf3f767d4604906e41d9b279447239..4e32a274a63c8244ce3168d0c5cc56203cfe5473 100644
--- a/lib/internal/fs/watchers.js
+++ b/lib/internal/fs/watchers.js
@@ -292,12 +292,13 @@ function emitCloseNT(self) {
 }
 
 // Legacy alias on the C++ wrapper object. This is not public API, so we may
-// want to runtime-deprecate it at some point. There's no hurry, though.
-ObjectDefineProperty(FSEvent.prototype, 'owner', {
-  __proto__: null,
-  get() { return this[owner_symbol]; },
-  set(v) { return this[owner_symbol] = v; },
-});
+if (!'owner' in FSEvent.prototype) {
+  ObjectDefineProperty(FSEvent.prototype, 'owner', {
+ __proto__: null,
+    get() { return this[owner_symbol]; },
+    set(v) { return this[owner_symbol] = v; }
+  });
+}
 
 let kResistStopPropagation;
 
diff --git a/src/node_builtins.cc b/src/node_builtins.cc
index 80b36dc1aefca4d5d4124d7f84b12b9762a8de2c..f3cda64beaa1403cb33f1b0bd8089f3dfcbfc8b9 100644
--- a/src/node_builtins.cc
+++ b/src/node_builtins.cc
@@ -35,6 +35,7 @@ using v8::Value;
 BuiltinLoader::BuiltinLoader()
     : config_(GetConfig()), code_cache_(std::make_shared<BuiltinCodeCache>()) {
   LoadJavaScriptSource();
+  LoadEmbedderJavaScriptSource();
 #ifdef NODE_SHARED_BUILTIN_CJS_MODULE_LEXER_LEXER_PATH
   AddExternalizedBuiltin(
       "internal/deps/cjs-module-lexer/lexer",
diff --git a/src/node_builtins.h b/src/node_builtins.h
index ea77c7598153bb8a9ba20c89a4ece2c1580b9a25..11d10f52b7c492bfae4bc58b39c20a693762a72d 100644
--- a/src/node_builtins.h
+++ b/src/node_builtins.h
@@ -126,6 +126,7 @@ class NODE_EXTERN_PRIVATE BuiltinLoader {
 
   // Generated by tools/js2c.py as node_javascript.cc
   void LoadJavaScriptSource();  // Loads data into source_
+  void LoadEmbedderJavaScriptSource();  // Loads embedder data into source_
   UnionBytes GetConfig();       // Return data for config.gypi
 
   std::vector<std::string_view> GetBuiltinIds() const;
diff --git a/tools/js2c.cc b/tools/js2c.cc
index f692c17d795419da11be1c25a2979f24979d8155..30db775f2a053b3bd95de68ceed8a01744375e69 100755
--- a/tools/js2c.cc
+++ b/tools/js2c.cc
@@ -32,6 +32,7 @@ namespace js2c {
 int Main(int argc, char* argv[]);
 
 static bool is_verbose = false;
+static bool only_js = false;
 
 void Debug(const char* format, ...) {
   va_list arguments;
@@ -587,15 +588,19 @@ int AddModule(const std::string& filename,
               Fragments* definitions,
               Fragments* initializers,
               Fragments* registrations,
-              std::optional<std::function<std::vector<char>(std::vector<char>)>> transform) {
+              std::optional<std::function<std::vector<char>(std::vector<char>)>> transform,
+              std::string filename_on_disk = std::string()) {
   Debug("AddModule %s start\n", filename.c_str());
 
+  if (filename_on_disk.empty())
+    filename_on_disk = filename;
+
   int error = 0;
-  size_t file_size = GetFileSize(filename, &error);
+  size_t file_size = GetFileSize(filename_on_disk, &error);
   if (error != 0) {
     return error;
   }
-  std::vector<char> code = ReadFileSync(filename.c_str(), file_size, &error);
+  std::vector<char> code = ReadFileSync(filename_on_disk.c_str(), file_size, &error);
   if (error != 0) {
     return error;
   }
@@ -760,53 +765,34 @@ int JS2C(const FileList& js_files,
 
     // Electron: Expose fs module without asar support.
     if (filename == "lib/fs.js") {
-      // int error = 0;
-      // if (error != 0 && error != UV_ENOENT)
-      //   return error;
-
-      // r = AddModule("lib/original-fs.js", &definitions, &initializers, &registrations, std::nullopt);
-      // if (r != 0) {
-      //   fprintf(stderr, "OH NO %d\n", __LINE__);
-      //   return r;
-      // }
+      r = AddModule("lib/original-fs.js", &definitions, &initializers, &registrations, std::nullopt, filename);
+      if (r != 0) {
+        return r;
+      }
     } else if (filename.rfind("lib/internal/fs/") != std::string::npos) {
-      // std::string original_fs_filename = filename;
-      // original_fs_filename = std::regex_replace(original_fs_filename, std::regex("internal/fs/"), "internal/original-fs/");
+    //   std::string original_fs_filename = filename;
+    //   original_fs_filename = std::regex_replace(original_fs_filename, std::regex("internal/fs/"), "internal/original-fs/");
  
-      // std::function<std::vector<char>(std::vector<char>)> ReadFileTransform = [](std::vector<char> code) {
-      //   bool is_one_byte = simdutf::validate_ascii(code.data(), code.size());
-
-      //   if (is_one_byte) {
-      //     fprintf(stderr, "OH NO %d\n", __LINE__);
-      //     std::string str(code.begin(), code.end());
-
-      //     std::string to_replace = "internal/fs/";
-      //     std::string replacement = "internal/original-fs/";
-
-      //     str = std::regex_replace(str, std::regex(to_replace), replacement);
-      //     return std::vector<char>(str.begin(), str.end());
-      //   } else {
-      //     fprintf(stderr, "OH NO %d\n", __LINE__);
-      //     std::u16string str(code.begin(), code.end());
-
-      //     std::u16string to_replace(u"internal/fs/");
-      //     std::u16string replacement(u"internal/original-fs/");
-
-      //     bool success = base::ReplaceChars(str, to_replace, replacement, &str);
-
-      //     if (!success) {
-      //       fprintf(stderr, "OOPS\n");
-      //     }
-
-      //     return std::vector<char>(str.begin(), str.end());
-      //   }
-      // };
-
-      // r = AddModule(original_fs_filename, &definitions, &initializers, &registrations, ReadFileTransform);
-      // if (r != 0) {
-      //   fprintf(stderr, "OH NO %d\n", __LINE__);
-      //   return r;
-      // };
+    //   std::function<std::vector<char>(std::vector<char>)> ReadFileTransform = [](std::vector<char> code) {
+    //     bool is_one_byte = simdutf::validate_ascii(code.data(), code.size());
+
+    //     if (is_one_byte) {
+    //       std::string str(code.begin(), code.end());
+    //       str = std::regex_replace(str, std::regex("internal/fs/"), "internal/original-fs/");
+
+    //       return std::vector<char>(str.begin(), str.end());
+    //     } else {
+    //       std::u16string str(code.begin(), code.end());
+    //       base::ReplaceChars(str, u"internal/fs/", u"internal/original-fs/", &str);
+
+    //       return std::vector<char>(str.begin(), str.end());
+    //     }
+    //   };
+
+    //   r = AddModule(original_fs_filename, &definitions, &initializers, &registrations, ReadFileTransform);
+    //   if (r != 0) {
+    //     return r;
+    //   }
     }
   }
   for (const auto& filename : mjs_files) {
@@ -816,12 +802,15 @@ int JS2C(const FileList& js_files,
     }
   }
 
-  assert(FilenameIsConfigGypi(config));
-  // "config.gypi" -> config_raw.
-  int r = AddGypi("config", config, &definitions);
-  if (r != 0) {
-    return r;
+  if (!only_js) {
+    assert(FilenameIsConfigGypi(config));
+    // "config.gypi" -> config_raw.
+    int r = AddGypi("config", config, &definitions);
+    if (r != 0) {
+      return r;
+    }
   }
+
   Fragment out = Format(definitions, initializers, registrations);
   return WriteIfChanged(out, dest);
 }
@@ -847,6 +836,8 @@ int Main(int argc, char* argv[]) {
     std::string arg(argv[i]);
     if (arg == "--verbose") {
       is_verbose = true;
+    } else if (arg == "--only-js") {
+      only_js = true;
     } else if (arg == "--root") {
       if (i == argc - 1) {
         fprintf(stderr, "--root must be followed by a path\n");
